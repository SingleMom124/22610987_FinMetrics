mutate(date = floor_date(date, "month"))
# Reading the monthly value for the ZAR to the USD
# Calculating the currency returns
zar <- read_rds("questions/Question2/data/Monthly_zar.rds") %>%
mutate(fx_change = log(value) - log(lag(value))) %>%
dplyr::select(-Tickers) %>%
mutate(date = floor_date(date, "month"))
# Constructing the global 60 - 40 USD portfolio...
# And join it to the ZAR currency returns
us_hedged_port <- indices %>%
dplyr::select(date, MSCI_ACWI, Bbg_Agg) %>%
pivot_longer(cols = -date,
names_to = "Index",
values_to = "Returns") %>%
mutate(Weights = ifelse(Index == "MSCI_ACWI", 0.6, 0.4)) %>%
group_by(date) %>%
mutate(portfolio = sum(Weights * Returns)) %>%
dplyr::select(date, portfolio) %>%
unique() %>%
inner_join(zar, by = "date")
# And recreating the plot from the study
fmxdat::finplot(us_hedged_port %>%
ggplot(aes(x = fx_change,
y = portfolio))+
geom_rect(aes(xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf), fill = "yellow4", alpha = 0.002) +
geom_rect(aes(xmin = 0, xmax = Inf, ymin = 0, ymax = Inf), fill = "green3", alpha = 0.002) +
geom_rect(aes(xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0), fill = "red", alpha = 0.002) +
geom_rect(aes(xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0), fill = "yellow", alpha = 0.002) +
geom_point(color = "darkblue",
alpha = 0.5) +
geom_smooth(method = "lm",
color = "darkgrey",
se = F) +
geom_hline(yintercept = 0,
color = "black",
linetype = "dashed",
size = 0.5) +
geom_vline(xintercept = 0,
color = "black",
linetype = "dotted",
size = 0.5) +
labs(x = "60-40 Global (USD Returns",
y = "USD-ZAR Returns"))
# Estimate the weights of the index according to specifications
weights <- data.frame(Index = colnames(indices)[sapply(indices, is.numeric)],
Weights = c(0.6 * 0.3, 0.4 * 0.3, 0.6 * 0.7, 0.4 * 0.7))
# Estimating an hedged index
# Hedged indices are those that do not account for rand exposure, so we do nothing to these indices
hedged_indices <- indices
hedged_port <- estimatePORT(data = hedged_indices,
size = 1000,
months = c(3, 6, 9, 12),
weights = weights)
# Now estimating as un-hedged portfolio
# Need to control USD returns for currency effects, do this by adding the change in the rand to the USD indices
unhedged_indices <- indices %>%
inner_join(zar, by = "date") %>%
mutate(MSCI_ACWI = MSCI_ACWI + fx_change,
Bbg_Agg = Bbg_Agg + fx_change) %>%
dplyr::select(-fx_change, -value)
unhedged_port <- estimatePORT(data = unhedged_indices,
size = 1000,
months = c(3, 6, 9, 12),
weights = weights)
# Annualized returns
# The USD portfolio
us_hedged_annual_ret <- us_hedged_port %>%
dplyr::select(date, portfolio) %>%
tbl_xts() %>%
Return.annualized(R = .,
scale = 12) %>%
data.frame()
# The local global hedged portfolio
hedged_annual_ret <- hedged_port$returns %>%
xts_tbl() %>%
filter(date >= ymd(20041201) & date <= ymd(20221201)) %>%
tbl_xts() %>%
Return.annualized(R = .,
scale = 12) %>%
data.frame()
# The local global unhedged portfolio
unhedged_annual_ret <- unhedged_port$returns %>%
xts_tbl() %>%
filter(date >= ymd(20041201) & date <= ymd(20221201)) %>%
tbl_xts() %>%
Return.annualized(R = .,
scale = 12) %>%
data.frame()
# Annualized SD
# The USD portfolio
hedged_annual_sd <- hedged_port$returns %>%
sd.annualized(x = .,
scale = 12)
# The local global hedged portfolio
unhedged_annual_sd <- unhedged_port$returns %>%
sd.annualized(x = .,
scale = 12)
# The local global unhedged portfolio
us_hedged_annual_sd <- us_hedged_port %>%
dplyr::select(date, portfolio) %>%
filter(date >= ymd(20041201) & date <= ymd(20221201)) %>%
tbl_xts() %>%
sd.annualized(x = .,
scale = 12)
# Putting all into a table
port_comp_table <- data.frame(Fund = c("Global (USD Returns: Hedged","Global + Local (Hedged)", "Global + Local (Unhedged"),
"Returns Ann." = c(us_hedged_annual_ret$portfolio, hedged_annual_ret$portfolio.returns, unhedged_annual_ret$portfolio.returns),
"Std Ann." = c(us_hedged_annual_sd, hedged_annual_sd, unhedged_annual_sd))
port_comp_table %>%
gt(caption = "Portfolio Performance")
# First I join the two portfolio returns together into a single xts object for comparative plotting
portfolios <- left_join(hedged_port$returns %>% xts_tbl() %>% rename("Hedged" = portfolio.returns),
unhedged_port$returns %>% xts_tbl() %>% rename("Unhedged" = portfolio.returns),
by = "date") %>%
filter(date >= ymd(20041201) & date <= ymd(20221201)) %>%
tbl_xts()
# Making the downside risk table with these indices
downside_table <- PerformanceAnalytics::table.DownsideRisk(R = portfolios,
ci = 0.95,
Rf = 0,
MAR = 0) %>% data.frame() %>%
rownames_to_column(var = "Estimate")
downside_table[c(1,5,7,8:11),] %>%
gt(caption = "Downside Risks")
# Cumulative returns with these indices
chart.CumReturns(R = portfolios,
width = 12,
main = "",
legend.loc = "topleft",
colorset = c("steelblue", "orange"))
# Necessary packages
rm(list = ls())
invisible(gc())
library(pacman)
p_load(rmsfuns, tidyverse, tbl2xts, devtools, PerformanceAnalytics, ggplot2, TTR, RcppRoll, xts, gt, knitr, ggpubr)
list.files('questions/Question3/code', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
# Loading the ALSI data and getting a look
# Filtering the data to start in 2013 as it when there is the most available data in small caps
data <- read_rds("data/ALSI.rds") %>%
dplyr::filter(date > ymd(20131231))
# Weights summed to 1
data %>% group_by(date) %>% summarise(sum(J203))
data %>% group_by(date) %>% summarise(sum(J403))
# First looking at the indices
indices <- data %>%
group_by(date) %>%
mutate(ALSI = sum(J203 * Return),
SWIX = sum(J403 * Return)) %>%
dplyr::select(date, ALSI, SWIX) %>%
unique() %>%
arrange(date)
chart.RollingPerformance(R = indices %>% tbl_xts(),
FUN = "sd",
width = 120,
main = "Rolling 120 day Standard Deviation",
legend.loc = "bottomleft",
colorset = c("steelblue", "orange"))
chart.CumReturns(R = indices%>% tbl_xts(),
main = "Portfolios cumulative returns",
legend.loc = "topleft",
colorset = c("steelblue", "orange"))
exposure <- data %>%
group_by(date, Sector) %>%
mutate(ALSI = sum(J203),
SWIX = sum(J403)) %>%
ungroup() %>%
dplyr::select(date, Sector, ALSI, SWIX) %>%
unique() %>%
arrange(Sector)
ggarrange(ggplot() + geom_area(data = exposure, aes(x = date, y = ALSI, fill = Sector), alpha = 0.7) + labs(x = "ALSI", y = "") + theme_bw(),
ggplot() + geom_area(data = exposure, aes(x = date, y = SWIX, fill = Sector), alpha = 0.7) + labs(x = "SWIX", y = "") +theme_bw(),
nrow = 1, ncol = 2,
common.legend = T,
legend = "bottom")
# Stocks by size and sector
data %>%
dplyr::select(Tickers, Index_Name, Sector) %>%
unique() %>%
mutate(Index_Name = ifelse(is.na(Index_Name), "Not Specified", Index_Name)) %>%
ggplot() +
geom_bar(aes(x = Index_Name,
fill = Sector)) +
labs(title = "Stocks by Size and Sector",
x = "Index Size",
y = "Number of Observations") +
theme_bw()
data %>%
dplyr::select(date, Return, Index_Name) %>%
dplyr::filter(!is.na(Index_Name)) %>%
group_by(date, Index_Name) %>%
mutate(Perf = mean(Return)) %>%
dplyr::select(-Return) %>%
unique() %>%
pivot_wider(names_from = Index_Name,
values_from = Perf) %>%
tbl_xts() %>%
chart.CumReturns(R = .,
main = "Index size mean cumulative returns",
legend.loc = "topleft")
data %>%
dplyr::select(date, Return, Index_Name) %>%
dplyr::filter(!is.na(Index_Name)) %>%
group_by(date, Index_Name) %>%
mutate(Perf = mean(Return)) %>%
dplyr::select(-Return) %>%
unique() %>%
pivot_wider(names_from = Index_Name,
values_from = Perf) %>%
tbl_xts() %>%
chart.RollingPerformance(R = .,
FUN = "sd",
width = 120,
main = "Rolling 120 day Standard Deviation",
legend.loc = "topleft")
# Getting the re balance data by filtering the original data according to the re balance days
days <- read_rds("questions/Question3/data/Rebalance_days.rds") %>%
dplyr::filter(Date_Type == "Reb Trade Day") %>%
pull(date)
rebalance <- data %>%
dplyr::filter(date %in% days) %>%
mutate(rebalance_time = format(date, "%Y%B")) %>%
dplyr::select(-Return, -Sector, -Index_Name)
# Separating the re-balance data
# The renaming is done simply to meet the requirements of the function I wrote
ALSI_Reb <- rebalance %>%
rename(tickers = Tickers,
weight = J203) %>%
dplyr::select(-J403)
SWIX_Reb <- rebalance %>%
rename(tickers = Tickers,
weight = J403) %>%
dplyr::select(-J203)
# Lastly, we need the returns data to actually re balance
# Again, renaming is done simply to meet the requirements of my function
returns <- data %>%
dplyr::select(date, Return, Tickers) %>%
rename(return = Return,
tickers = Tickers)
# ALSI caps
ALSI_Cap1 <- indexCAP(data = returns,
rebalance = ALSI_Reb,
cap = 0.05)
colnames(ALSI_Cap1)[2] <- "ALSI 5% Cap"
ALSI_Cap2 <- indexCAP(data = returns,
rebalance = ALSI_Reb,
cap = 0.1)
colnames(ALSI_Cap2)[2] <- "ALSI 10% Cap"
# SWIX caps
SWIX_Cap1 <- indexCAP(data = returns,
rebalance = SWIX_Reb,
cap = 0.05)
colnames(SWIX_Cap1)[2] <- "SWIX 5% Cap"
SWIX_Cap2 <- indexCAP(data = returns,
rebalance = SWIX_Reb,
cap = 0.1)
colnames(SWIX_Cap2)[2] <- "SWIX 10% Cap"
# Creating the index data frame
capped_indices <- ALSI_Cap1 %>%
inner_join(ALSI_Cap2, by = "date") %>%
inner_join(SWIX_Cap1, by = "date") %>%
inner_join(SWIX_Cap2, by = "date") %>%
inner_join(indices, by = "date") %>%
tbl_xts()
# Cumulative returns plots
chart.CumReturns(R = capped_indices[, c(1, 2, 5)],
main = "ALSI cumulative returns",
legend.loc = "topleft")
chart.CumReturns(R = capped_indices[, c(3, 4, 6)],
main = "SWIX cumulative returns",
legend.loc = "topleft")
# Downside risks table
PerformanceAnalytics::table.DownsideRisk(R = capped_indices,
ci = 0.95,
scale = 12)%>%
rownames_to_column(var = "Estimates") %>%
gt(caption = "Downside Risks")
# Necessary packages
rm(list = ls())
invisible(gc())
library(pacman)
p_load(rmsfuns, tidyverse, tbl2xts, devtools, PerformanceAnalytics, ggplot2, TTR, RcppRoll, xts, gt, knitr, ggpubr)
list.files('questions/Question4/code', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
portholds <- read_rds("questions/Question4/data/Fund_Holds.rds")
portrets <- read_rds("questions/Question4/data/Fund_Rets.rds")
bmholds <- read_rds("questions/Question4/data/BM_Holds.rds")
bmrets <- read_rds("questions/Question4/data/BM_Rets.rds")
# Joining the two funds by their date columns and removing un-necessary columns
# Also converting to xts to be used in performance analytics
portfolios <- inner_join(portrets, bmrets, by = "date") %>%
dplyr::select(-Portolio) %>%
rename(SO = Returns) %>%
tbl_xts()
# Downside risks
plot(PerformanceAnalytics::table.DownsideRisk(R = portfolios,
ci = 0.95,
scale = 12)%>%
rownames_to_column(var = "Estimates") %>%
gt(caption = "Downside Risks"))
# Single Factor Asset-Pricing Model Summary
plot(PerformanceAnalytics::table.SFM(Ra = portfolios$SO,
Rb = portfolios$BM,
scale = 12,
Rf = 0) %>%
rownames_to_column(var = "Estimates") %>%
gt(caption = "Statistics and STylised Facts"))
# Cumulative returns
PerformanceAnalytics::chart.CumReturns(R = portfolios,
geometric = T,
main = "Cumulative Returns",
legend.loc="bottomright",
colorset = c("steelblue", "orange"),
lwd = 1.5)
# 12-month rolling returns
chart.RollingPerformance(R = portfolios,
width = 12,
main="Rolling 12-Month Returns",
legend.loc="bottomleft",
colorset = c("steelblue", "orange"),
lwd = 1.5)
# Scatter plot
PerformanceAnalytics::chart.Scatter(y = portfolios$SO,
x = portfolios$BM,
main = "Scatter: Snake Oil Funds & Capped SWIX",
ylab = "Snake Oil",
xlab = "Capped SWIX",
col = "black",
symbolset = 16)
# 12-month rolling standard deviation
chart.RollingPerformance(R = portfolios,
FUN = "sd",
width = 12,
main="Rolling 12-Month Standard Deviation",
legend.loc="bottomleft",
colorset = c("steelblue", "orange"),
lwd = 1.5)
# First extracting each unique stock in the snake oil fund
tickers <- portholds %>% dplyr::select(Tickers) %>% unique() %>% pull(Tickers)
# I then want to determine which sector each is from using the Sector column in the benchmark 'bmholds' data
# Using the unique stocks in 'tickers' I filter the benchmark data
# However, there is a duplicate, MNP which as a version for both resources and industrial
# I keep the resources version
so_holds <- bmholds %>%
dplyr::select(-date, -name, -Portfolio) %>%
unique() %>%
dplyr::filter(Tickers %in% tickers) %>%
mutate(Dup = duplicated(Tickers)) %>%
dplyr::filter(!Dup == T) %>%
dplyr::select(-Dup)
# Now with the Stock names and their relative sectors, I can estimate the weights for each sector by summing them together
# Convert to xts to pass to performance analytics
sector_weights <- portholds %>%
inner_join(so_holds, by = "Tickers") %>%
group_by(date, Sector) %>%
mutate(Sector_W = sum(Weight)) %>%
dplyr::select(date, Sector, Sector_W) %>%
unique() %>%
pivot_wider(names_from = Sector,
values_from = Sector_W) %>%
tbl_xts()
# Now using these sector weights to make a stacked bar chart
PerformanceAnalytics::chart.StackedBar(w = sector_weights,
space = 0)
# Necessary packages
rm(list = ls())
invisible(gc())
library(pacman)
p_load(rmsfuns, tidyverse, tbl2xts, devtools, PerformanceAnalytics, ggplot2, TTR, RcppRoll, xts, gt, knitr, ggpubr)
list.files('questions/Question5/code', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
cncy <- read_rds("questions/Question5/data/currencies.rds")
cncy_carry <- read_rds("questions/Question5/data/cncy_Carry.rds")
cncy_value <- read_rds("questions/Question5/data/cncy_value.rds")
cncyiv <- read_rds("questions/Question5/data/cncyIV.rds")
bbdxy <- read_rds("questions/Question5/data/bbdxy.rds")
# Look at 3 emerging market currencies, and 3 G10 currencies
countries <- c("SouthAfrica", "Mexico", "India","UK", "Japan", "EU")
# Calculate the currency returns (dlog)
fx_change <- cncy %>%
mutate(Name = gsub("_Cncy", "", Name),
Name = gsub("_Inv", "", Name)) %>%
dplyr::filter(Name %in% countries) %>%
group_by(Name) %>%
mutate(Return = log(Price) - log(lag(Price)),
Scaled_Price = Price - mean(Price, na.rm = T)) %>%
dplyr::filter(date >= ymd(20000101)) %>%
ungroup()
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +guides(alpha = "none")) +
theme_bw() +
theme(legend.position = "none")
fmxdat::finplot(fx_change %>%
ggplot() +
aes(x = Return,
fill = Name) +
geom_histogram(alpha = 0.5) +
facet_wrap(facets = ~ Name,
scales = "free_y") +
guides(fill = "none", alpha = "none")) +
theme_bw() +
theme(legend.position = "none")
# Cleaning the returns
# Needs to be in xts format for performance analytics
cleaned_fx_xts <- fx_change %>%
tbl_xts(.,
cols_to_xts = "Return",
spread_by = "Name") %>%
PerformanceAnalytics::Return.clean(.,
method = "boudt",
alpha = 0.01)
# Also do a non-xts version for ggploting
cleaned_fx <- cleaned_fx_xts %>%
xts_tbl() %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Return") %>%
group_by(Currency) %>%
mutate(Return_Sqr = Return ^ 2,
Return_Abs = abs(Return)) %>%
ungroup()
# Cleaned returns
fmxdat::finplot(cleaned_fx %>%
ggplot() +
aes(x = date,
y = Return,
color = Currency) +
geom_line(alpha = 0.5) +
facet_wrap(facets = ~ Currency,
scales = "free") +
ggtitle("Currency returns relative to the USD") +
guides(alpha = "none"),
y.pct = T,
y.pct_acc = 1) +
theme_bw()
# Squared cleaned returns
fmxdat::finplot(cleaned_fx %>%
ggplot() +
aes(x = date,
y = Return_Sqr,
color = Currency) +
geom_line(alpha = 0.5) +
facet_wrap(facets = ~ Currency,
scales = "free") +
ggtitle("Currency returns squared relative to the USD") +
guides(alpha = "none")) +
theme_bw()
# Absolute cleaned returns
fmxdat::finplot(cleaned_fx %>%
ggplot() +
aes(x = date,
y = Return_Abs,
color = Currency) +
geom_line(alpha = 0.5) +
facet_wrap(facets = ~ Currency,
scales = "free") +
ggtitle("Currency returns absolute relative to the USD") +
guides(alpha = "none")) +
theme_bw()
sa_garch <- bestGARCH(data = cleaned_fx_xts$SouthAfrica,
comp = c("sGARCH","gjrGARCH","eGARCH","apARCH"),
garchOrder = c(1, 1),
armaOrder = c(1, 0),
fit = "Akaike")
sa_garch$Criteria
plot(sa_garch$gjrGARCH, which = 3)
# Feed the cleaned xts returns and specify the type of GARCH
gogarch <- estimateGOGARCH(data = cleaned_fx_xts,
type = "gjrGARCH")
# Now plotting the volatilities
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- sigma %>%
xts_tbl() %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol")
fmxdat::finplot(sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")) +
theme_bw()
# And the correlation pairs
# The output here has super kak naming though so adjust with the following function
pairs <- gogarch$TV_Cor
# The renaming function
pairs <- renameMGARCH(series = cleaned_fx_xts,
pairs = pairs,
long = T)
fmxdat::finplot(ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs), !grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
facet_wrap(~ Pairs) +
theme_bw() +
ggtitle("Go-GARCH: SA"))
# Average vol
sigma %>%
group_by(Currency) %>%
mutate(Mean_Vol = mean(Vol, na.rm = T)) %>%
dplyr::select(-date, -Vol) %>%
unique() %>%
arrange(desc(Mean_Vol)) %>%
gt(caption = "Average Conditional Volatility")
