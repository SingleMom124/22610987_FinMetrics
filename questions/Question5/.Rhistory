solver = "hybrid",
cluster = makePSOCKcluster(10),
gfun = "tanh",
maxiter1 = 40000,
epsilon = 1e-08,
rseed = 100)
# From this we can extract the sigmas and time varying correlations
Sigma <- gogarch@mfit$factor.sigmas
TV_Cor <- rcor(gogarch)
TV_Cor <- aperm(TV_Cor, c(3,2,1))
dim(TV_Cor) <- c(nrow(TV_Cor), ncol(TV_Cor)^2)
# This has kak naming though so fix it with the following function
output <- list(Sigma = Sigma,
TV_Cor = TV_Cor)
return(output)
}
estimateGOGARCH <- function(data,
type,
garchOrder = c(1, 1),
armaOrder = c(1, 0)){
library(pacman)
p_load(rugarch, rmgarch, xts, tidyverse, ggplot2)
# First specify a univariate GARCH
uni_specifications <- rugarch::ugarchspec(variance.model = list(model = type,
garchOrder = garchOrder),
mean.model = list(armaOrder = armaOrder,
include.mean = T),
distribution.model = "sstd")
# Second, repeat it n times so each series is fitted with the specified GARCH
multi_specifications <- rugarch::multispec(replicate(ncol(data), uni_specifications))
# Third, push this through to a Go-GARCH specification
go_specification <- rmgarch::gogarchspec(multi_specifications,
distribution.model = "mvnorm",
ica = "fastica")
# Fourth, fit a milti-variable model
multiple <- rugarch::multifit(multi_specifications,
data,
cluster = makePSOCKcluster(10))
# Can now fit the Go-GARCH
gogarch <- rmgarch::gogarchfit(spec = go_specification,
data = data,
solver = "hybrid",
cluster = makePSOCKcluster(10),
gfun = "tanh",
maxiter1 = 40000,
epsilon = 1e-08,
rseed = 100)
# From this we can extract the sigmas and time varying correlations
Sigma <- gogarch@mfit$factor.sigmas
TV_Cor <- rcor(gogarch)
TV_Cor <- aperm(TV_Cor, c(3,2,1))
dim(TV_Cor) <- c(nrow(TV_Cor), ncol(TV_Cor)^2)
# This has kak naming though so fix it with the following function
output <- list(Sigma = Sigma,
TV_Cor = TV_Cor)
return(output)
}
gogarch <- estimateGOGARCH(data = cleaned_fx_xts,
type = "gjrGARCH")
sigma <- gogarch$Sigma
View(sigma)
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
fmxdat::finplot(sigma %>%
tbl_xts() %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol") %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y"))
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma %>%
xts_tbl() %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol") %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
sigma <- gogarch$Sigma
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma) %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol") %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma)
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma) %>%
mutate(date = as.Date(date)) %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol") %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma) %>%
data.frame() %>%
mutate(date = as.Date(date)) %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol") %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma) %>%
data.frame() %>%
mutate(date = as.Date(date)) %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol")
sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Sigma,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")
fmxdat::finplot(sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y"))
fmxdat::finplot(sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")) +
theme_bw()
pairs <- gogarch$TV_Cor
View(pairs)
pairs <- renameMGARCH(series = cleaned_fx_xts,
pairs = pairs,
long = T)
View(pairs)
pairs <- gogarch$TV_Cor
pairs <- renameMGARCH(series = cleaned_fx_xts,
pairs = pairs,
long = T)
ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs),
!grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
theme_bw() +
ggtitle("Go-GARCH: SA")
fmxdat::finplot(ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs),
!grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
theme_bw() +
ggtitle("Go-GARCH: SA"))
fmxdat::finplot(ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs), !grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
facet_wrap(~ Pairs)
theme_bw() +
fmxdat::finplot(ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs), !grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
facet_wrap(~ Pairs) +
theme_bw() +
ggtitle("Go-GARCH: SA"))
fmxdat::finplot(sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")) +
theme_bw()
View(sigma)
sigma_mean <- sigma %>%
group_by(Currency) %>%
mutate(Mean_Vol = mean(Vol, na.rm = T)) %>%
dplyr::select(-date, -Vol) %>%
unique()
View(sigma_mean)
sigma_mean <- sigma %>%
group_by(Currency) %>%
mutate(Mean_Vol = mean(Vol, na.rm = T)) %>%
dplyr::select(-date, -Vol) %>%
unique() %>%
arrange(Mean_Vol)
sigma_mean <- sigma %>%
group_by(Currency) %>%
mutate(Mean_Vol = mean(Vol, na.rm = T)) %>%
dplyr::select(-date, -Vol) %>%
unique() %>%
arrange(Mean_Vol)
#################################################################################
# Estimate a GOGARCH Model
#################################################################################
estimateGOGARCH <- function(data,                   # Data to investigate
type,                   # Type of GARCH you want to apply across the series
garchOrder = c(1, 1),
armaOrder = c(1, 0)){
library(pacman)
p_load(rugarch, rmgarch, xts, tidyverse, ggplot2)
# First specify a univariate GARCH
uni_specifications <- rugarch::ugarchspec(variance.model = list(model = type,
garchOrder = garchOrder),
mean.model = list(armaOrder = armaOrder,
include.mean = T),
distribution.model = "sstd")
# Second, repeat it n times so each series is fitted with the specified GARCH
multi_specifications <- rugarch::multispec(replicate(ncol(data), uni_specifications))
# Third, push this through to a Go-GARCH specification
go_specification <- rmgarch::gogarchspec(multi_specifications,
distribution.model = "mvnorm",
ica = "fastica")
# Fourth, fit a multi-variable model
multiple <- rugarch::multifit(multi_specifications,
data,
cluster = makePSOCKcluster(10))
# Can now fit the Go-GARCH
gogarch <- rmgarch::gogarchfit(spec = go_specification,
data = data,
solver = "hybrid",
cluster = makePSOCKcluster(10),
gfun = "tanh",
maxiter1 = 40000,
epsilon = 1e-08,
rseed = 100)
# From this we can extract the sigmas and time varying correlations
Sigma <- sigma(gogarch)
TV_Cor <- rcor(gogarch)
TV_Cor <- aperm(TV_Cor, c(3,2,1))
dim(TV_Cor) <- c(nrow(TV_Cor), ncol(TV_Cor)^2)
# This has kak naming though so fix it with the following function
output <- list(Sigma = Sigma,
TV_Cor = TV_Cor)
return(output)
}
gogarch <- estimateGOGARCH(data = cleaned_fx_xts,
type = "gjrGARCH")
# Now plotting the volatilities
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- cbind(date = index(cleaned_fx_xts), sigma) %>%
data.frame() %>%
mutate(date = as.Date(date)) %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol")
gogarch <- estimateGOGARCH(data = cleaned_fx_xts,
type = "gjrGARCH")
# Now plotting the volatilities
sigma <- gogarch$Sigma
colnames(sigma) <- colnames(cleaned_fx_xts)
sigma <- sigma %>%
xts_tbl() %>%
pivot_longer(cols = -date,
names_to = "Currency",
values_to = "Vol")
fmxdat::finplot(sigma %>%
ggplot() +
geom_line(aes(x = date,
y = Vol,
color = Currency)) +
facet_wrap(~ Currency,
scales = "free_y")) +
theme_bw()
# And the correlation pairs
# The output here has super kak naming though so adjust with the following function
pairs <- gogarch$TV_Cor
pairs <- renameMGARCH(series = cleaned_fx_xts,
pairs = pairs,
long = T)
fmxdat::finplot(ggplot(pairs %>% dplyr::filter(grepl("SouthAfrica_", Pairs), !grepl("_SouthAfrica", Pairs))) +
geom_line(aes(x = date,
y = Rho,
color = Pairs)) +
facet_wrap(~ Pairs) +
theme_bw() +
ggtitle("Go-GARCH: SA"))
# Average vol
sigma_mean <- sigma %>%
group_by(Currency) %>%
mutate(Mean_Vol = mean(Vol, na.rm = T)) %>%
dplyr::select(-date, -Vol) %>%
unique() %>%
arrange(desc(Mean_Vol))
library(gt)
library(gt)
sigma_mean %>%
gt() %>%
tab_header(title = glue::glue("Mean perod volatility"))
gt(sigma_mean)
View(cncy_carry)
View(bbdxy)
# Necessary packages
rm(list = ls())
invisible(gc())
library(pacman)
p_load(rmsfuns, tidyverse, tbl2xts, devtools, PerformanceAnalytics, ggplot2, TTR, RcppRoll, xts, fmxdat, knitr)
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Scaled_Price,
color = Name) +
geom_line(alpha = 0.5) +
guides(alpha = "none")) +
theme_bw()
# Look at 3 emerging market currencies, and 3 G10 currencies
countries <- c("SouthAfrica", "Mexico", "India","UK", "Japan", "EU")
# Calculate the currency returns (dlog)
fx_change <- cncy %>%
mutate(Name = gsub("_Cncy", "", Name),
Name = gsub("_Inv", "", Name)) %>%
dplyr::filter(Name %in% countries) %>%
group_by(Name) %>%
mutate(Return = log(Price) - log(lag(Price)),
Scaled_Price = Price - mean(Price, na.rm = T)) %>%
dplyr::filter(date >= ymd(20000101)) %>%
ungroup()
# Loading data
cncy <- read_rds("data/currencies.rds")
cncy_carry <- read_rds("data/cncy_Carry.rds")
cncy_value <- read_rds("data/cncy_value.rds")
cncyiv <- read_rds("data/cncyIV.rds")
bbdxy <- read_rds("data/bbdxy.rds")
# Look at 3 emerging market currencies, and 3 G10 currencies
countries <- c("SouthAfrica", "Mexico", "India","UK", "Japan", "EU")
# Calculate the currency returns (dlog)
fx_change <- cncy %>%
mutate(Name = gsub("_Cncy", "", Name),
Name = gsub("_Inv", "", Name)) %>%
dplyr::filter(Name %in% countries) %>%
group_by(Name) %>%
mutate(Return = log(Price) - log(lag(Price)),
Scaled_Price = Price - mean(Price, na.rm = T)) %>%
dplyr::filter(date >= ymd(20000101)) %>%
ungroup()
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Scaled_Price,
color = Name) +
geom_line(alpha = 0.5) +
guides(alpha = "none")) +
theme_bw()
# Look at 3 emerging market currencies, and 3 G10 currencies
countries <- c("SouthAfrica", "Mexico", "India","UK", "Japan", "EU")
# Calculate the currency returns (dlog)
fx_change <- cncy %>%
mutate(Name = gsub("_Cncy", "", Name),
Name = gsub("_Inv", "", Name)) %>%
dplyr::filter(Name %in% countries) %>%
group_by(Name) %>%
mutate(Return = log(Price) - log(lag(Price))) %>%
dplyr::filter(date >= ymd(20000101)) %>%
ungroup()
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name) +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme_bw()
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme_bw()
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme_bw(legend.position = "none")
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme(legend.position = "none") +
theme_bw()
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme(legend.position = "none")
# Looking at the currency prices relative to the USD
fmxdat::finplot(fx_change%>%
ggplot() +
aes(x = date,
y = Price,
color = Name) +
geom_line(alpha = 0.5) +
facet_wrap(~ Name,
scales = "free_y") +
labs(x = "Price",
y = "Date") +
guides(alpha = "none")) +
theme_bw() +
theme(legend.position = "none")
fmxdat::finplot(fx_change %>%
ggplot() +
aes(x = Return,
fill = Name) +
geom_histogram(alpha = 0.5) +
facet_wrap(facets = ~ Name,
scales = "free") +
ggtitle("Log Returns: Currencies relative to the USD") +
guides(fill = "none", alpha = "none")) +
theme_bw() +
theme(legend.position = "none"
fmxdat::finplot(fx_change %>%
ggplot() +
aes(x = Return,
fill = Name) +
geom_histogram(alpha = 0.5) +
facet_wrap(facets = ~ Name,
scales = "free_y") +
ggtitle("Log Returns: Currencies relative to the USD") +
guides(fill = "none", alpha = "none")) +
theme_bw() +
theme(legend.position = "none")
fmxdat::finplot(fx_change %>%
ggplot() +
aes(x = Return,
fill = Name) +
geom_histogram(alpha = 0.5) +
facet_wrap(facets = ~ Name,
scales = "free_y") +
guides(fill = "none", alpha = "none")) +
theme_bw() +
theme(legend.position = "none")
# And the correlation pairs
# The output here has super kak naming though so adjust with the following function
pairs <- gogarch$TV_Cor
